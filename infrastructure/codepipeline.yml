AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Region:
    Description: The aws region where pipeline is hosted
    Type: String
    Default: eu-west-1

Resources:
  artifactBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: "sls-visma-course-artifact-bucket"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  backendPipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: "backend-pipeline-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
            Effect: Allow
            Resource: "*"
          - Action:
              - 's3:*'
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:CreateStack'
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:UpdateStack'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'codebuild:StartBuild'
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:UpdateProject'
              - 'codebuild:CreateProject'
              - 'codebuild:DeleteProject'
              - 'codebuild:CreateWebhook'
              - 'codebuild:UpdateWebhook'
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - 'iam:CreateRole'
              - 'iam:AttachRolePolicy'
              - 'iam:DetachRolePolicy'
              - 'iam:GetRole'
              - 'iam:GetRolePolicy'
              - 'iam:DeleteRole'
              - 'iam:DeleteRolePolicy'
              - 'iam:PutRolePolicy'
              - 'iam:UpdateAssumeRolePolicy'
              - 'iam:TagRole'
              - 'iam:ListRoleTags'
            Effect: Allow
            Resource:
              - "*"
          - Action:
              - 'iam:PassRole'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'codepipeline:*'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'events:*'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'lambda:GetFunction'
              - 'lambda:GetFunctionConfiguration'
              - 'lambda:DeleteFunction'
              - 'lambda:CreateFunction'
              - 'lambda:InvokeFunction'
              - 'lambda:UpdateFunctionConfiguration'
              - 'lambda:UpdateFunctionCode'
              - 'lambda:ListTags'
              - 'lambda:TagResource'
              - 'lambda:UntagResource'
              - 'lambda:AddPermission'
              - 'lambda:RemovePermission'
            Effect: Allow
            Resource:
              - "*"
          - Action:
              - 'cloudfront:GetDistribution'
              - 'cloudfront:GetCachePolicy'
              - 'cloudfront:GetCloudFrontOriginAccessIdentity'
              - 'cloudfront:CreateDistribution'
              - 'cloudfront:CreateCachePolicy'
              - 'cloudfront:CreateCloudFrontOriginAccessIdentity'
              - 'cloudfront:UpdateDistribution'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'secretsmanager:GetSecretValue'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'budget:*'
              - 'budgets:*'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'apigateway:POST'
              - 'apigateway:GET'
              - 'apigateway:PATCH'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'route53:GetHostedZone'
              - 'route53:ChangeResourceRecordSets'
              - 'route53:ListResourceRecordSets'
              - 'route53:GetChange'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'ssm:GetParameters'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'codestar-notifications:CreateNotificationRule'
            Effect: Allow
            Resource: "*"
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - 'cloudfront:*'
            Effect: Allow
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - "sns:CreateTopic"
              - "sns:DeleteTopic"
              - "sns:GetTopicAttributes"
              - "sns:SetTopicAttributes"
              - "sns:Subscribe"
              - "sns:ListTopics"
              - "sns:DeleteTopic"
              - "sns:Publish"
              - "sns:ListSubscriptionsByTopic"
              - "sns:*TopicAttributes"
              - "sns:*SubscriptionAttributes"
            Resource: "*"
          - Effect: Allow
            Action: "guardduty:CreateDetector"
            Resource: "*"
          - Effect: Allow
            Action:
              - "iam:CreateRole"
              - "iam:AttachRolePolicy"
              - "iam:PutRolePolicy"
              - "iam:DetachRolePolicy"
              - "iam:GetPolicy"
              - "iam:GetRolePolicy"
              - "iam:DeleteRole"
              - "iam:DeletePolicy"
              - "iam:DeleteRolePolicy"
              - "iam:PassRole"
              - "iam:CreatePolicy"
              - "iam:CreatePolicyVersion"
              - "iam:ListPolicyVersion"
              - "iam:ListPolicyVersions"
              - "iam:DeletePolicyVersion"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "cloudtrail:StartLogging"
              - "cloudtrail:UpdateTrail"
              - "cloudtrail:DeleteTrail"
              - "cloudtrail:CreateTrail"
              - "cloudtrail:DeleteTrail"
              - "cloudtrail:PutEventSelectors"
            Resource: "*"
          - Effect: Allow
            Action:
              - "kms:CreateKey"
              - "cloudtrail:DescribeTrails"
            Resource: "*"
          - Effect: Allow
            Action:
              - "dynamodb:*"
            Resource: "*"

  backendPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "backendPipelinePipelineCreator"
      AssumeRolePolicyDocument:
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - !Ref backendPipelinePolicy

  deploySlsCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyName: "codeBuildAccess"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - '*'
            Effect: Allow
            Resource: '*'

  deploySlsCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: "Code build for deploying backend serverless application"
      ServiceRole: !GetAtt deploySlsCodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: nikolaik/python-nodejs:python3.9-nodejs16
        PrivilegedMode: false
      Name: "sls-deploy-backend"
      Source:
        BuildSpec: infrastructure/buildspec.yml
        GitCloneDepth: 1
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      TimeoutInMinutes: 5

  slsBackendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: "sls-pipeline"
      RoleArn:
        Fn::GetAtt: [ backendPipelineRole, Arn ]
      Stages:
        - Name: Source
          Actions:
          - Name: SLS-Course
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Version: 1
              Provider: GitHub
            Configuration:
              Owner: martinsommerseth
              Repo: SLS-Course
              Branch: master
              PollForSourceChanges: false
              OAuthToken: '{{resolve:secretsmanager:GITHUB_ACCESS_TOKEN:SecretString:token}}'
            OutputArtifacts:
              - Name: SourceArtifact
            Region: !Sub ${Region}
        - Name: Deploy
          Actions:
          - Name: DeployBackend
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref deploySlsCodeBuild
            RunOrder: 2
            Region: !Ref Region
            InputArtifacts:
              - Name: SourceArtifact
      ArtifactStore:
        Type: S3
        Location: !Ref artifactBucket
#
#  sourceWebHookBackend:
#    Type: 'AWS::CodePipeline::Webhook'
#    Properties:
#      AuthenticationConfiguration:
#        SecretToken: '{{resolve:secretsmanager:GITHUB_WEBHOOK_TOKEN_SOLVER_SERVICE:SecretString:token}}'
#      Filters:
#      - JsonPath: "$.ref"
#        MatchEquals: 'refs/heads/master'
#      Authentication: GITHUB_HMAC
#      TargetPipeline: !Ref subzeroBackendPipeline
#      TargetAction: Subzero-Backend
#      Name: "backendPipelineWebhook"
#      TargetPipelineVersion: !GetAtt subzeroBackendPipeline.Version
#      RegisterWithThirdParty: 'true'
#    DependsOn: subzeroBackendPipeline